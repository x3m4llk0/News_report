import aiofiles

from aiogram import Router, Bot
from aiogram.filters import Text
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
from loader import config
from tgbot.keyboards.news_callback import ChangeRoleCB, ChangeAccessCB, DeleteUserCB
from tgbot.models import db_commands as commands
import os
from aiogram.filters.command import Command

# from tgbot.filters.admin import AdminFilter

admin_router = Router()
# admin_router.message.filter(AdminFilter())
roles = {'ns': '–ù–∞—á–∞–ª—å–Ω–∏–∫ —Å–µ–∫—Ç–æ—Ä–∞', 'expert': '–≠–∫—Å–ø–µ—Ä—Ç', 'analyst': '–ê–Ω–∞–ª–∏—Ç–∏–∫'}


@admin_router.callback_query(Text('changerole'))
async def chose_role(call: CallbackQuery, bot: Bot):
    await call.answer(cache_time=1)
    keyboard = InlineKeyboardMarkup(row_width=2,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='–≠–∫—Å–ø–µ—Ä—Ç', callback_data='cr_to_expert'),
                                            InlineKeyboardButton(text='–ê–Ω–∞–ª–∏—Ç–∏–∫', callback_data='cr_to_analyst')
                                        ],
                                        [
                                            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit_cr')
                                        ]
                                    ])
    await call.message.edit_text(text="–ö–µ–º –Ω–∞–∑–Ω–∞—á–∞–µ–º?", reply_markup=keyboard)




@admin_router.callback_query(Text(text='quit_cr'))
async def quit_cr(call: CallbackQuery, bot: Bot):
    await call.message.edit_text(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ ‚ö†", reply_markup=None)


@admin_router.callback_query(Text(contains='cr_to_'))
async def change_user(call: CallbackQuery, bot: Bot):
    new_role = call.data[6:]
    changer = await commands.select_user(call.from_user.id)
    sop_dict = await commands.all_users_by_sop(changer.sop)
    keyboard = InlineKeyboardBuilder()
    if changer is not None and changer.role == 'ns':
        for user_id in sop_dict:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await commands.select_user(user_id)

            if call.from_user.id == user.user_id:
                continue
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å
            if user.role == new_role:
                continue
            user = InlineKeyboardButton(text=f'üë§{user.last_name} {user.first_name[0]}.',
                                        callback_data=ChangeRoleCB(user_id=user.user_id, new_role=new_role).pack())
            keyboard.row(user)

    elif call.from_user.id in config.tg_bot.admin_ids:
        for user_id in sop_dict:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # if call.from_user.id == user.user_id:
            #     continue
            user = await commands.select_user(user_id)
            if user.role == new_role:
                continue
            user = InlineKeyboardButton(text=f'üë§{user.last_name} {user.first_name[0]}.',
                                        callback_data=ChangeRoleCB(user_id=user.user_id, new_role=new_role).pack())
            keyboard.add(user)
    quit_button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit_cr')
    keyboard.adjust(3)
    keyboard.row(quit_button)
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —Ä–æ–ª–∏", reply_markup=keyboard.as_markup())


@admin_router.callback_query(ChangeRoleCB.filter())
async def change_role(call: CallbackQuery, callback_data: ChangeRoleCB):
    await call.answer(cache_time=60)
    user_id = callback_data.user_id
    new_role = callback_data.new_role
    user = await commands.select_user(user_id)
    await commands.update_role(user_id=user_id, role=new_role)
    await call.message.edit_text(
        text=f'–ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {user.first_name} {user.last_name} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å {roles[new_role]}')



@admin_router.callback_query(Text('my_team'))
async def my_team(call: CallbackQuery, bot: Bot):
    exporter = await commands.select_user(call.from_user.id)
    sop_dict = await commands.all_users_by_sop(exporter.sop)
    text = ""
    exporter = await commands.select_user(call.from_user.id)
    if exporter.sop == 'stvp':
        for user_id in sop_dict:
            user = await commands.select_user(user_id)
            text_new = (
                f"<a href='tg://user?id={user.user_id}'>{user.last_name} {user.first_name}</a>. –î–æ–ª–∂–Ω–æ—Å—Ç—å: {roles[user.role]}. {'<b>–°–æ–≥–ª–∞—Å—É—é—â–∏–π</b>'if user.access == 'agreement' else ''} <i>–ë–æ–Ω—É—Å—ã/–û—à–∏–±–∫–∏: –≤ —Ä–∞–±–æ—Ç–µ</i>\n")
            text += text_new
        await call.message.edit_text(text=text)
    else:
        for user_id in sop_dict:
            user = await commands.select_user(user_id)
            text_new = (
                f"<a href='tg://user?id={user.user_id}'>{user.last_name} {user.first_name}</a>. –î–æ–ª–∂–Ω–æ—Å—Ç—å: {roles[user.role]}. {'–°–æ–≥–ª–∞—Å—É—é—â–∏–π'if user.access == 'agreement' else ''}.\n")
            text += text_new
        await call.message.edit_text(text=text)



@admin_router.callback_query(Text('changeaccess'))
async def changeaccess(call: CallbackQuery, bot: Bot):
    await call.answer(cache_time=1)
    keyboard = InlineKeyboardMarkup(row_width=2,
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(text='–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è',
                                                                 callback_data='ca_to_new'),
                                            InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ù–°',
                                                                 callback_data='ca_to_return')
                                        ],
                                        [
                                            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit_ca')
                                        ]
                                    ])
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=keyboard)



@admin_router.callback_query(Text('ca_to_new'))
async def change_access_new(call: CallbackQuery):
    changer = await commands.select_user(call.from_user.id)
    sop_dict = await commands.all_users_by_sop(changer.sop)
    keyboard = InlineKeyboardBuilder()
    for user_id in sop_dict:
        user = await commands.select_user(user_id)
        # –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if call.from_user.id == user.user_id:
            continue
        if user.role != 'expert':
            continue
        user = InlineKeyboardButton(text=f'üë§{user.last_name} {user.first_name[0]}.',
                                    callback_data=ChangeAccessCB(user_id=user.user_id).pack())
        keyboard.row(user)

    quit_button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit_ca')
    keyboard.adjust(2)
    keyboard.row(quit_button)
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∑–∞–º–µ—â–µ–Ω–∏—è", reply_markup=keyboard.as_markup())


@admin_router.callback_query(Text('quit_ca'))
async def quit_ca(call: CallbackQuery, bot: Bot):
    await call.message.edit_text(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è ‚ö†", reply_markup=None)


@admin_router.callback_query(ChangeAccessCB.filter())
async def change_role(call: CallbackQuery, callback_data: ChangeAccessCB):
    await call.answer(cache_time=1)
    user_id = callback_data.user_id
    new_access = "agreement"

    changer = await commands.select_user(call.from_user.id)
    sop_dict = await commands.all_users_by_sop(changer.sop)
    for user_id in sop_dict:
        await commands.update_access(user_id=user_id, access="user")
    user = await commands.select_user(user_id)
    await commands.update_access(user_id=user_id, access=new_access)
    await call.message.edit_text(
        text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.first_name} {user.last_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º')


@admin_router.callback_query(Text('ca_to_return'))
async def return_access(call: CallbackQuery):
    await call.answer(cache_time=1)
    new_access = "agreement"
    changer = await commands.select_user(call.from_user.id)
    sop_dict = await commands.all_users_by_sop(changer.sop)
    for user_id in sop_dict:
        await commands.update_access(user_id=user_id, access="user")
    ns_user_id = await commands.all_users_by_sop_and_role(changer.sop, 'ns')
    ns_user = await commands.select_user(ns_user_id[0])
    await commands.update_access(user_id=ns_user.user_id, access=new_access)
    await call.message.edit_text(
        text=f'–ü—Ä–∞–≤–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ù–° {ns_user.first_name} {ns_user.last_name}')


#
@admin_router.message(Command("delete"))
async def delete(message: Message):
    if message.from_user.id in config.tg_bot.admin_ids:
        users = await commands.select_all_users()
        keyboard = InlineKeyboardBuilder()
        for user in users:
            user = InlineKeyboardButton(text=f'üë§{user.last_name} {user.first_name[0]}.',
                                        callback_data=DeleteUserCB(user_id=user.user_id).pack())
            keyboard.row(user)
        quit_button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='delete_stop')
        keyboard.adjust(3)
        keyboard.row(quit_button)
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=keyboard.as_markup())
    else:
        await message.answer(f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@admin_router.callback_query(Text("delete_stop"))
async def delete_stop(call: CallbackQuery, bot: Bot):
    await call.message.edit_text(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ö†", reply_markup=None)


@admin_router.callback_query(DeleteUserCB.filter())
async def delete_user_cb(call: CallbackQuery, callback_data: DeleteUserCB):
    await call.answer(cache_time=1)
    user_id = callback_data.user_id
    print(user_id)
    user = await commands.select_user(user_id=user_id)
    await commands.delete_user(user_id)
    await call.message.edit_text(
        text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.first_name} {user.last_name} —É–¥–∞–ª–µ–Ω')



@admin_router.callback_query(Text('help'))
async def help(call: CallbackQuery):
    await call.answer(cache_time=1)
    await call.message.answer('–ï—Å–ª–∏ –ø—Ä–æ–ø–∞–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start\n'
                        '<i>*–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ*</i>')



# –î–æ –ª—É—á—à–∏—Ö –≤—Ä–µ–º–µ–Ω
# @admin_router.message(Command("my_team_export"))
# async def my_team_export(message: Message):
#     changer = await commands.select_user(user_id=message.from_user.id)
#     if changer is not None and changer.role == 'ns' or message.from_user.id in config.tg_bot.admin_ids:
#         await message.answer('CSV —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...')
#         users = await commands.select_all_users()
#         filename = f'logs/my_team.csv'
#
#         async with aiofiles.open(filename, mode='w', encoding='utf-8', newline='') as file:
#             writer = AsyncDictWriter(file, ['user_id', 'tg_first_name', 'username', 'first_name', 'last_name',
#                                             'access', 'role', 'bonus', 'mistake', 'status', 'is_active'])
#             await writer.writeheader()
#             for user in users:
#                 row = {
#                     'user_id': user.user_id,
#                     'tg_first_name': user.tg_first_name,
#                     'username': user.username,
#                     'first_name': user.first_name,
#                     'last_name': user.last_name,
#                     'access': user.access,
#                     'role': user.role,
#                     'bonus': user.bonus,
#                     'mistake': user.mistake,
#                     'status': user.status,
#                     'is_active': user.is_active
#                 }
#                 await writer.writerow(row)
#
#         time.sleep(3)
#         file = FSInputFile('logs/my_team.csv')
#         await message.answer_document(document=file)
#
#         time.sleep(3)
#         os.remove('logs/my_team.csv')
#     else:
#         await message.answer(f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º —Å–µ–∫—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")