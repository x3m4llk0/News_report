from aiogram import Router, types
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram import types
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from aiogram.types import Message, CallbackQuery, Update, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, FSInputFile
from aiogram.utils.markdown import hbold

from loader import config
from tgbot.keyboards.inline import rules_kb, menu_kb, back_to_menu_kb, approve_disable_bot
from tgbot.misc.platform_api import send_upd, send_to_api
from tgbot.misc.questions import questions_and_answers
from tgbot.misc.states import dialog, registration
from tgbot.models import db_commands as commands

user_router = Router()


@user_router.message(commands=["start"], state=None)
async def bot_start(message: types.Message, state: FSMContext, bot: Bot):
    user = await commands.select_user(message.from_user.id)
    if not user or not user.is_active:
        print(await bot.get_updates())
        quit_markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')]])

        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –°–û–ü–æ–≤–µ—Ü! –ù–∞—á–∞–ª–∞—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë –∏–º—è:'
                             , disable_web_page_preview=True, parse_mode='Markdown', reply_markup=quit_markup)
        await state.set_state(registration.first_name)
    else:
        if user.status == "active":
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {user.first_name}\n"
                                 f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        elif user.status == "ban":
            await message.answer("–¢—ã –∑–∞–±–∞–Ω–µ–Ω")

        else:
            await message.answer("–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ @x3m4llk0")


## –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä—Ü–∞—Ü–∏–∏
@user_router.message(state=registration.first_name)
async def first_name_user(message: types.Message, state: FSMContext):
    first_name = message.text.capitalize()
    await state.update_data(first_name=first_name)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:\n')
    await state.set_state(registration.last_name)


@user_router.message(state=registration.last_name)
async def last_name_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    first_name = data.get('first_name')
    last_name = message.text.capitalize()
    await commands.create_user(user_id=message.from_user.id,
                               tg_first_name=message.from_user.first_name,
                               username=message.from_user.username,
                               first_name=first_name,
                               last_name=last_name,
                               access='User',
                               role='analyst',
                               bonus=int('0'),
                               mistake=int('0'),
                               status="active",
                               is_active=True)
    await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                         "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–∂–º–∏ /help")
    await state.clear()


@user_router.callback_query(text='quit', state=[registration.last_name, registration.first_name])
async def quit(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.delete()
    await bot.send_message(chat_id=call.from_user.id, text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚ö†")


@user_router.message(commands=["help"], state=None)
async def help(message: types.Message):
    user = await commands.select_user(user_id=message.from_user.id)
    if user.role == 'team_leader' or message.from_user.id in config.tg_bot.admin_ids:
        await message.answer(f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                             f"/changerole - –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤\n"
                             f"/changeaccess - –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π\n"
                             f"/my_team - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö\n"
                             f"/my_team_export - –≤—ã–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –≤ —Ñ–∞–π–ª–µ")
    elif user.access == 'SuperUser':
        await message.answer(f'–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                             f"/changeacces - –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ù–°")
    else:
        await message.answer(f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                             f"/news - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")

# @user_router.message(commands=["start"], state=None)
# async def user_start(message: types.Message):
#     user = await commands.select_user(message.chat.id)
#     if not user or not user.is_active:
#         await commands.create_user(user_id=message.from_user.id,
#                                    tg_first_name=message.from_user.first_name,
#                                    username=message.from_user.username,
#                                    first_name="–ò–º—è",
#                                    last_name="–§–∞–º–∏–ª–∏—è",
#                                    access='User',
#                                    role='user',
#                                    bonus=int('0'),
#                                    mistake=int('0'),
#                                    status="active",
#                                    is_active=True)
#         await message.answer("–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
#     else:
#         await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω")

# @user_router.message(commands=["start"], state=None)
# async def user_start(message: Message):
#     user = await get_user(message.chat.id)
#     if not user or not user.is_active:
#         return await message.answer(hbold(
#             f'–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —á–∞—Ç–µ-–±–æ—Ç–µ ¬´–î—Ä—É–∑—å—è SPLAT¬ª! –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É'
#             f'¬´–ü—Ä–∏–Ω—è—Ç—å¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã –∏ '
#             f'–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–≥–ª–∞—Å–Ω–æ –ü–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.'
#         ), reply_markup=await rules_kb())
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá", reply_markup=await menu_kb())
#
#
#
# @user_router.message(commands=["menu"], state=None)
# async def user_start(message: Message):
#     user = await get_user(message.chat.id)
#     if not user or not user.is_active:
#         return await message.answer(hbold(
#             f'–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —á–∞—Ç–µ-–±–æ—Ç–µ ¬´–î—Ä—É–∑—å—è SPLAT¬ª! –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É'
#             f'¬´–ü—Ä–∏–Ω—è—Ç—å¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã –∏ '
#             f'–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–≥–ª–∞—Å–Ω–æ –ü–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.'
#         ), reply_markup=await rules_kb())
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá", reply_markup=await menu_kb())
#
#
# @user_router.callback_query(text="rules")
# async def rules(call: CallbackQuery):
#     file = FSInputFile(f'rules_friends.pdf')
#     await call.message.answer_document(document=file)
#
#
# @user_router.message(commands=["stop_dialog"])
# async def stop_dialog(message: Message, state: FSMContext, event_update: Update):
#     await state.clear()
#     await send_upd(event_update.json(), close_session=True)
#     await message.answer(
#         "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–∞–ª—å—à–µ (–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)",
#         reply_markup=await back_to_menu_kb())
#
#
# @user_router.callback_query(text="accept_rules")
# async def accept_rules(call: CallbackQuery):
#     await create_user(call.message.chat.id, username=call.message.chat.username, is_active=True)
#     await send_to_api(call.message.chat.id, title="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∞–≤–∏–ª–∞", name="start")
#     await call.message.edit_text("\n".join(
#         [
#             f'{hbold("–£—Ä–∞, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!")}',
#             f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± ¬´–î—Ä—É–∑–µ–π SPLAT¬ª! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª: '
#             f'https://t.me/+dCKPtkvgTvY5OWEy. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ ‚Äì –∏–º–µ–Ω–Ω–æ —Ç–∞–º –±—É–¥—É—Ç '
#             f'–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.'
#         ]
#     ), reply_markup=await menu_kb(), disable_web_page_preview=True)
#
#
# @user_router.callback_query(text="back_to_menu", state="*")
# async def back_to_menu(call: CallbackQuery, state: FSMContext):
#     await state.clear()
#     await send_to_api(call.message.chat.id)
#     await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá", reply_markup=await menu_kb())
#
#
# @user_router.callback_query(text="cancel_rules")
# async def cancel_rules(call: CallbackQuery):
#     await send_to_api(call.message.chat.id)
#     await send_to_api(call.message.chat.id, title="–û—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∞–≤–∏–ª–∞", name="cancel_rules")
#     await call.message.edit_text("–ñ–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ —Å –Ω–∞–º–∏! –ù–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ /start")
#
#
# @user_router.callback_query(text="disable_bot_approve")
# async def cancel_rules(call: CallbackQuery):
#     await call.message.edit_text("–ß—Ç–æ üòÆ?! –í—ã —Å–µ—Ä—å–µ–∑–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å –ø–æ–∫–∏–Ω—É—Ç—å?", reply_markup=await approve_disable_bot())
#
#
# @user_router.callback_query(text="disable_bot")
# async def cancel_rules(call: CallbackQuery):
#     await delete_user(call.message.chat.id)
#     await send_to_api(call.message.chat.id, title="–ü–æ–∫–∏–Ω—É–ª –±–æ—Ç–∞", name="disable_bot")
#     await call.message.edit_text("–ß—Ç–æ –∂, –Ω–µ —Å–º–µ–µ–º –≤–∞—Å –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å, –Ω–æ –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å –±–µ–∑ –≤–∞—Å üò¢!")
#
#
# @user_router.callback_query(text="not_disable_bot")
# async def cancel_rules(call: CallbackQuery):
#     await call.message.edit_text("–ö–∞–∫ –º—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! \n"
#                                  "–ó–∞–±—É–¥–µ–º –æ –±—ã–ª–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#                                  reply_markup=await back_to_menu_kb())
#
#
# @user_router.callback_query(text="another_question")
# async def another_question(call: CallbackQuery, state: FSMContext):
#     await call.message.edit_text("–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å? \n\n"
#                                  "–ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–º –≤ –æ–∫–æ—à–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –≤–∞–º —Å –æ—Ç–≤–µ—Ç–æ–º!)",
#                                  reply_markup=await back_to_menu_kb())
#     await state.set_state(dialog.session)
#     await state.update_data(count=0)
#
#
# @user_router.message(state=dialog.session)
# async def dialog_with_manager(message: Message, event_update: Update, state: FSMContext):
#     session = await get_session(user_id=message.chat.id)
#     await send_to_api(message.chat.id)
#     data = await state.get_data()
#     count = data.get("count")
#     if message.text:
#         if message.text.startswith("/"):
#             return message.answer(
#                 f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /stop_dialog")
#     if session:
#         await send_upd(event_update.json())
#     else:
#         await send_upd(event_update.json(), True)
#         await create_session(user_id=message.chat.id)
#     if count == 0:
#         await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É, "
#                              "–æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /stop_dialog")
#         await state.update_data(count=1)
#
#
# @user_router.inline_query(text="#–ü—Ä–æ–¥—É–∫—Ü–∏—è")
# @user_router.inline_query(text="#–ü—Ä–æ–≥—Ä–∞–º–º–∞")
# async def show_question(query: InlineQuery):
#     user_id = query.from_user.id
#     user = await get_user(user_id)
#     if not user or not user.is_active:
#         await query.answer(
#             results=[],
#             switch_pm_text="–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–µ –∏ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.",
#             switch_pm_parameter="inline",
#             cache_time=5
#         )
#         return
#     if query.query == "#–ü—Ä–æ–¥—É–∫—Ü–∏—è":
#         name = "question"
#         photo_url = "https://i.imgur.com/eyU7EDv.png"
#     else:
#         name = "program_inline"
#         photo_url = "https://i.imgur.com/OvIeJEg.png"
#     await send_to_api(user_id, title=f"–ó–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ {query.query}", name=name)
#     Q_A = await questions_and_answers(query.query)
#     result = []
#     for number, item in enumerate(Q_A, start=1):
#         result.append(InlineQueryResultArticle(id=number,
#                                                title=item,
#                                                input_message_content=InputTextMessageContent(
#                                                    message_text=f'{hbold(item)}\n\n' + Q_A[item],
#                                                    disable_web_page_preview=True,
#                                                ),
#                                                thumb_url=photo_url,
#                                                description=Q_A[item][:20] + "..."
#                                                ))
#     await query.answer(results=result)
